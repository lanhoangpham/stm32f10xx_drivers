
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000920  08000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800092c  0800092c  00010934  2**0
                  CONTENTS
  4 .ARM          00000000  0800092c  0800092c  00010934  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800092c  08000934  00010934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000934  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000934  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010934  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ec6  00000000  00000000  0001095d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000346  00000000  00000000  00011823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00011b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00011c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001edd  00000000  00000000  00011d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001464  00000000  00000000  00013c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000087de  00000000  00000000  000150a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  0001d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000908 	.word	0x08000908

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000908 	.word	0x08000908

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIO_PeriClockCtr>:
 * For more information about the APIs check the function definitions
 ***********************************************************************************************/
/*
 * peripheral clock setup
 * */
void GPIO_PeriClockCtr(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
	if( EnorDi == ENABLE){
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d136      	bne.n	8000200 <GPIO_PeriClockCtr+0x80>
		if (pGPIOx == GPIOA){
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <GPIO_PeriClockCtr+0xf8>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIO_PeriClockCtr+0x28>
			GPIOA_PCLK_EN();
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a37      	ldr	r2, [pc, #220]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
			GPIOE_PCLK_DI();
		}
	}


}
 80001a6:	e061      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOB){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a35      	ldr	r2, [pc, #212]	; (8000280 <GPIO_PeriClockCtr+0x100>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIO_PeriClockCtr+0x3e>
			GPIOB_PCLK_EN();
 80001b0:	4b32      	ldr	r3, [pc, #200]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a31      	ldr	r2, [pc, #196]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e056      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOC){
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a30      	ldr	r2, [pc, #192]	; (8000284 <GPIO_PeriClockCtr+0x104>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIO_PeriClockCtr+0x54>
			GPIOC_PCLK_EN();
 80001c6:	4b2d      	ldr	r3, [pc, #180]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a2c      	ldr	r2, [pc, #176]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001cc:	f043 0310 	orr.w	r3, r3, #16
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e04b      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOD){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <GPIO_PeriClockCtr+0x108>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIO_PeriClockCtr+0x6a>
			GPIOD_PCLK_EN();
 80001dc:	4b27      	ldr	r3, [pc, #156]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a26      	ldr	r2, [pc, #152]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e040      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOE){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <GPIO_PeriClockCtr+0x10c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d13c      	bne.n	800026c <GPIO_PeriClockCtr+0xec>
			GPIOE_PCLK_EN();
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e035      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		if (pGPIOx == GPIOA){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <GPIO_PeriClockCtr+0xf8>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockCtr+0x96>
			GPIOA_PCLK_DI();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 800020e:	f023 0304 	bic.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e02a      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOB){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <GPIO_PeriClockCtr+0x100>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockCtr+0xac>
			GPIOB_PCLK_DI();
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000224:	f023 0308 	bic.w	r3, r3, #8
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e01f      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOC){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <GPIO_PeriClockCtr+0x104>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockCtr+0xc2>
			GPIOC_PCLK_DI();
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6193      	str	r3, [r2, #24]
}
 8000240:	e014      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOD){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <GPIO_PeriClockCtr+0x108>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockCtr+0xd8>
			GPIOD_PCLK_DI();
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000250:	f023 0320 	bic.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
}
 8000256:	e009      	b.n	800026c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOE){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <GPIO_PeriClockCtr+0x10c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d105      	bne.n	800026c <GPIO_PeriClockCtr+0xec>
			GPIOE_PCLK_DI();
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GPIO_PeriClockCtr+0xfc>)
 8000266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800026a:	6193      	str	r3, [r2, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011000 	.word	0x40011000
 8000288:	40011400 	.word	0x40011400
 800028c:	40011800 	.word	0x40011800

08000290 <GPIO_Init>:
/**
 * initialize and di-int
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//get pin number of this GPIO
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	73bb      	strb	r3, [r7, #14]

	uint8_t temp;

	//configure for input mode
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == 0) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2) ){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	795b      	ldrb	r3, [r3, #5]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <GPIO_Init+0x1e>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	7a5b      	ldrb	r3, [r3, #9]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d904      	bls.n	80002b8 <GPIO_Init+0x28>

		temp = (uint8_t)pGPIOHandle->GPIO_PinConfig.GPIO_PinInType << 2;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	79db      	ldrb	r3, [r3, #7]
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	73fb      	strb	r3, [r7, #15]
 80002b6:	e00b      	b.n	80002d0 <GPIO_Init+0x40>

	}
	//configure for output mode and alternate function
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	795b      	ldrb	r3, [r3, #5]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d107      	bne.n	80002d0 <GPIO_Init+0x40>

		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOP_AltFunc_PpOp) << 2) + pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7a1b      	ldrb	r3, [r3, #8]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	799b      	ldrb	r3, [r3, #6]
 80002cc:	4413      	add	r3, r2
 80002ce:	73fb      	strb	r3, [r7, #15]

	}

	//configure for port register high
	 if ( (pinNumber > 7 ) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2)){
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	d803      	bhi.n	80002de <GPIO_Init+0x4e>
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7a5b      	ldrb	r3, [r3, #9]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d91f      	bls.n	800031e <GPIO_Init+0x8e>

		 //clear the pin number
		 pGPIOHandle->pGPIOx->GPIOx_CRH &= ~(0xF << (4 * (pinNumber % 8)));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	f003 0307 	and.w	r3, r3, #7
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	210f      	movs	r1, #15
 80002ee:	fa01 f303 	lsl.w	r3, r1, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	4619      	mov	r1, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	400a      	ands	r2, r1
 80002fc:	605a      	str	r2, [r3, #4]

		 //set pin mode
		 pGPIOHandle->pGPIOx->GPIOx_CRH |= temp << (4 * (pinNumber % 8));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	7bf9      	ldrb	r1, [r7, #15]
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f003 0307 	and.w	r3, r3, #7
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	4619      	mov	r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	430a      	orrs	r2, r1
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	e021      	b.n	8000362 <GPIO_Init+0xd2>

	 }
	 //configure for port register low
	 else if((pinNumber <= 7 ) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < 2)){
 800031e:	7bbb      	ldrb	r3, [r7, #14]
 8000320:	2b07      	cmp	r3, #7
 8000322:	d81e      	bhi.n	8000362 <GPIO_Init+0xd2>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d81a      	bhi.n	8000362 <GPIO_Init+0xd2>

		 //clear the pin number
		 pGPIOHandle->pGPIOx->GPIOx_CRL &= ~(0xF << (4 * (pinNumber)));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	7bbb      	ldrb	r3, [r7, #14]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	210f      	movs	r1, #15
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	400a      	ands	r2, r1
 8000346:	601a      	str	r2, [r3, #0]

		 //set pin mode
		 pGPIOHandle->pGPIOx->GPIOx_CRL |= temp << (4 * pinNumber);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	7bf9      	ldrb	r1, [r7, #15]
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	4619      	mov	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]

	 }

	 /*this part code for interrupt mode*/
	 	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	7a5b      	ldrb	r3, [r3, #9]
 8000366:	2b01      	cmp	r3, #1
 8000368:	f240 80a5 	bls.w	80004b6 <GPIO_Init+0x226>

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_FT ){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	7a5b      	ldrb	r3, [r3, #9]
 8000370:	2b02      	cmp	r3, #2
 8000372:	d114      	bne.n	800039e <GPIO_Init+0x10e>

	 			//configure the FTSR
	 			EXTI->EXTI_FTSR |= (1 << pinNumber);
 8000374:	4b52      	ldr	r3, [pc, #328]	; (80004c0 <GPIO_Init+0x230>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	7bba      	ldrb	r2, [r7, #14]
 800037a:	2101      	movs	r1, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a4f      	ldr	r2, [pc, #316]	; (80004c0 <GPIO_Init+0x230>)
 8000384:	430b      	orrs	r3, r1
 8000386:	60d3      	str	r3, [r2, #12]

	 			//clear the corresponding RTSR bit
	 			EXTI->EXTI_RTSR &= ~(1 << pinNumber);
 8000388:	4b4d      	ldr	r3, [pc, #308]	; (80004c0 <GPIO_Init+0x230>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	7bba      	ldrb	r2, [r7, #14]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a49      	ldr	r2, [pc, #292]	; (80004c0 <GPIO_Init+0x230>)
 800039a:	400b      	ands	r3, r1
 800039c:	6093      	str	r3, [r2, #8]

	 		}

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_RT ){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	7a5b      	ldrb	r3, [r3, #9]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d114      	bne.n	80003d0 <GPIO_Init+0x140>

	 			//configure the RTSR pin
	 			EXTI->EXTI_RTSR |= (1 << pinNumber);
 80003a6:	4b46      	ldr	r3, [pc, #280]	; (80004c0 <GPIO_Init+0x230>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	7bba      	ldrb	r2, [r7, #14]
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <GPIO_Init+0x230>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6093      	str	r3, [r2, #8]

	 			//clear the corresponding FTSR pin
	 			EXTI->EXTI_FTSR &= ~(1 << pinNumber);
 80003ba:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <GPIO_Init+0x230>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	7bba      	ldrb	r2, [r7, #14]
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	43d2      	mvns	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a3d      	ldr	r2, [pc, #244]	; (80004c0 <GPIO_Init+0x230>)
 80003cc:	400b      	ands	r3, r1
 80003ce:	60d3      	str	r3, [r2, #12]
	 		}

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_RFT ){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a5b      	ldrb	r3, [r3, #9]
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d113      	bne.n	8000400 <GPIO_Init+0x170>

	 			//configure the FTSR
	 			EXTI->EXTI_FTSR |= (1 << pinNumber);
 80003d8:	4b39      	ldr	r3, [pc, #228]	; (80004c0 <GPIO_Init+0x230>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	7bba      	ldrb	r2, [r7, #14]
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a36      	ldr	r2, [pc, #216]	; (80004c0 <GPIO_Init+0x230>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	 			//configure the RTSR pin
	 			EXTI->EXTI_RTSR |= (1 << pinNumber);
 80003ec:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <GPIO_Init+0x230>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	7bba      	ldrb	r2, [r7, #14]
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <GPIO_Init+0x230>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6093      	str	r3, [r2, #8]
	 		}

	 		/*configure the GPIO port selection in AFIO_EXTICR*/

	 		//select the port
	 		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a2f      	ldr	r2, [pc, #188]	; (80004c4 <GPIO_Init+0x234>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d02b      	beq.n	8000462 <GPIO_Init+0x1d2>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <GPIO_Init+0x238>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d024      	beq.n	800045e <GPIO_Init+0x1ce>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a2c      	ldr	r2, [pc, #176]	; (80004cc <GPIO_Init+0x23c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d01d      	beq.n	800045a <GPIO_Init+0x1ca>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <GPIO_Init+0x240>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d016      	beq.n	8000456 <GPIO_Init+0x1c6>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <GPIO_Init+0x244>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d00f      	beq.n	8000452 <GPIO_Init+0x1c2>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a28      	ldr	r2, [pc, #160]	; (80004d8 <GPIO_Init+0x248>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d008      	beq.n	800044e <GPIO_Init+0x1be>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <GPIO_Init+0x24c>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <GPIO_Init+0x1ba>
 8000446:	2306      	movs	r3, #6
 8000448:	e00c      	b.n	8000464 <GPIO_Init+0x1d4>
 800044a:	2300      	movs	r3, #0
 800044c:	e00a      	b.n	8000464 <GPIO_Init+0x1d4>
 800044e:	2305      	movs	r3, #5
 8000450:	e008      	b.n	8000464 <GPIO_Init+0x1d4>
 8000452:	2304      	movs	r3, #4
 8000454:	e006      	b.n	8000464 <GPIO_Init+0x1d4>
 8000456:	2303      	movs	r3, #3
 8000458:	e004      	b.n	8000464 <GPIO_Init+0x1d4>
 800045a:	2302      	movs	r3, #2
 800045c:	e002      	b.n	8000464 <GPIO_Init+0x1d4>
 800045e:	2301      	movs	r3, #1
 8000460:	e000      	b.n	8000464 <GPIO_Init+0x1d4>
 8000462:	2300      	movs	r3, #0
 8000464:	737b      	strb	r3, [r7, #13]

	 		//enable clock for AFIO periphery6al
	 		AFIO_PCLK_EN();
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <GPIO_Init+0x250>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <GPIO_Init+0x250>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]

	 		//set the pin
	 		uint8_t temp1 = pinNumber / 4;
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	089b      	lsrs	r3, r3, #2
 8000476:	733b      	strb	r3, [r7, #12]
	 		uint8_t temp2 = pinNumber % 4;
 8000478:	7bbb      	ldrb	r3, [r7, #14]
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	72fb      	strb	r3, [r7, #11]
	 		AFIO->AFIO_EXTICR[temp1] |= portcode << (4 * (temp2));
 8000480:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <GPIO_Init+0x254>)
 8000482:	7b3b      	ldrb	r3, [r7, #12]
 8000484:	3302      	adds	r3, #2
 8000486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048a:	7b79      	ldrb	r1, [r7, #13]
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	4618      	mov	r0, r3
 8000496:	4913      	ldr	r1, [pc, #76]	; (80004e4 <GPIO_Init+0x254>)
 8000498:	7b3b      	ldrb	r3, [r7, #12]
 800049a:	4302      	orrs	r2, r0
 800049c:	3302      	adds	r3, #2
 800049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	 		/*enable the exti interrupt delivery using IMR*/
	 		EXTI->EXTI_IMR |= ( 1 << pinNumber);
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <GPIO_Init+0x230>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	7bba      	ldrb	r2, [r7, #14]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <GPIO_Init+0x230>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	6013      	str	r3, [r2, #0]
	 	}

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40010400 	.word	0x40010400
 80004c4:	40010800 	.word	0x40010800
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40011400 	.word	0x40011400
 80004d4:	40011800 	.word	0x40011800
 80004d8:	40011c00 	.word	0x40011c00
 80004dc:	40012000 	.word	0x40012000
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <SPI_PCLK_CTRL>:
 *  Created on: Apr 21, 2023
 *      Author: lanph
 */
#include "stm32f103xx_spi_driver.h"

void SPI_PCLK_CTRL(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
	if ( EnorDi == ENABLE){
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d120      	bne.n	800053c <SPI_PCLK_CTRL+0x54>
		if (pSPIx == SPI1 ){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a22      	ldr	r2, [pc, #136]	; (8000588 <SPI_PCLK_CTRL+0xa0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <SPI_PCLK_CTRL+0x28>
			SPI1_PLCK_EN();
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6193      	str	r3, [r2, #24]
			}
			else if(pSPIx == SPI3){
				SPI2_PLCK_DI();
			}
	}
}
 800050e:	e035      	b.n	800057c <SPI_PCLK_CTRL+0x94>
		else if(pSPIx == SPI2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <SPI_PCLK_CTRL+0xa8>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <SPI_PCLK_CTRL+0x3e>
			SPI2_PLCK_EN();
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000522:	61d3      	str	r3, [r2, #28]
}
 8000524:	e02a      	b.n	800057c <SPI_PCLK_CTRL+0x94>
		else if(pSPIx == SPI3){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <SPI_PCLK_CTRL+0xac>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d126      	bne.n	800057c <SPI_PCLK_CTRL+0x94>
			SPI2_PLCK_EN();
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a16      	ldr	r2, [pc, #88]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000538:	61d3      	str	r3, [r2, #28]
}
 800053a:	e01f      	b.n	800057c <SPI_PCLK_CTRL+0x94>
		if (pSPIx == SPI1 ){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <SPI_PCLK_CTRL+0xa0>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <SPI_PCLK_CTRL+0x6a>
				SPI1_PLCK_DI();
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 800054a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800054e:	6193      	str	r3, [r2, #24]
}
 8000550:	e014      	b.n	800057c <SPI_PCLK_CTRL+0x94>
			else if(pSPIx == SPI2){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <SPI_PCLK_CTRL+0xa8>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <SPI_PCLK_CTRL+0x80>
				SPI2_PLCK_DI();
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000564:	61d3      	str	r3, [r2, #28]
}
 8000566:	e009      	b.n	800057c <SPI_PCLK_CTRL+0x94>
			else if(pSPIx == SPI3){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <SPI_PCLK_CTRL+0xac>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d105      	bne.n	800057c <SPI_PCLK_CTRL+0x94>
				SPI2_PLCK_DI();
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <SPI_PCLK_CTRL+0xa4>)
 8000576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800057a:	61d3      	str	r3, [r2, #28]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40013000 	.word	0x40013000
 800058c:	40021000 	.word	0x40021000
 8000590:	40003800 	.word	0x40003800
 8000594:	40003c00 	.word	0x40003c00

08000598 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIx){
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	uint16_t temp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]

	//configure the device mode ( master or slave)
	temp = (pSPIx->SPI_Config.SPI_DeviceMode << 2);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	81fb      	strh	r3, [r7, #14]

	if( pSPIx->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d104      	bne.n	80005c0 <SPI_Init+0x28>
		//configure for full duplex mode
		temp &= ~( 1 << 15);
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005bc:	81fb      	strh	r3, [r7, #14]
 80005be:	e016      	b.n	80005ee <SPI_Init+0x56>
	}else if (pSPIx->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d106      	bne.n	80005d6 <SPI_Init+0x3e>
		//configure for half duplex mode
		temp |= ( 1 << 15);
 80005c8:	89fb      	ldrh	r3, [r7, #14]
 80005ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80005ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80005d2:	81fb      	strh	r3, [r7, #14]
 80005d4:	e00b      	b.n	80005ee <SPI_Init+0x56>
	}else if(pSPIx->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d107      	bne.n	80005ee <SPI_Init+0x56>
		//clear BIDI mode
		temp &= ~( 1 << 10);
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005e4:	81fb      	strh	r3, [r7, #14]
		//configure for single duplex mode
		temp |= ( 1 << 10);
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ec:	81fb      	strh	r3, [r7, #14]
	}

	//configure for DFF mode
	if ( pSPIx->SPI_Config.SPI_DFF == SPI_DFF_16BITS){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	79db      	ldrb	r3, [r3, #7]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d109      	bne.n	800060a <SPI_Init+0x72>
		temp |= (pSPIx->SPI_Config.SPI_DFF << 11);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	79db      	ldrb	r3, [r3, #7]
 80005fa:	02db      	lsls	r3, r3, #11
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000602:	4313      	orrs	r3, r2
 8000604:	b21b      	sxth	r3, r3
 8000606:	81fb      	strh	r3, [r7, #14]
 8000608:	e00c      	b.n	8000624 <SPI_Init+0x8c>
	}else{
		temp &= ~(pSPIx->SPI_Config.SPI_DFF << 11);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	79db      	ldrb	r3, [r3, #7]
 800060e:	b29b      	uxth	r3, r3
 8000610:	02db      	lsls	r3, r3, #11
 8000612:	b29b      	uxth	r3, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	b21a      	sxth	r2, r3
 800061a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800061e:	4013      	ands	r3, r2
 8000620:	b21b      	sxth	r3, r3
 8000622:	81fb      	strh	r3, [r7, #14]
	}

	//configure for speed
	temp |= (pSPIx->SPI_Config.SPI_SclkSpeed << 5);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	015b      	lsls	r3, r3, #5
 800062a:	b21a      	sxth	r2, r3
 800062c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000630:	4313      	orrs	r3, r2
 8000632:	b21b      	sxth	r3, r3
 8000634:	81fb      	strh	r3, [r7, #14]

	//configure for cpol
	temp |= (pSPIx->SPI_Config.SPI_CPOL << 1);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a1b      	ldrb	r3, [r3, #8]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b21a      	sxth	r2, r3
 800063e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000642:	4313      	orrs	r3, r2
 8000644:	b21b      	sxth	r3, r3
 8000646:	81fb      	strh	r3, [r7, #14]

	//configure for cpha
	temp |= (pSPIx->SPI_Config.SPI_CPHA << 0);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7a5b      	ldrb	r3, [r3, #9]
 800064c:	b29a      	uxth	r2, r3
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	4313      	orrs	r3, r2
 8000652:	81fb      	strh	r3, [r7, #14]

	//configure for ssm
	temp |= ( pSPIx->SPI_Config.SPI_SSM << 9);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a9b      	ldrb	r3, [r3, #10]
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	b21a      	sxth	r2, r3
 800065c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000660:	4313      	orrs	r3, r2
 8000662:	b21b      	sxth	r3, r3
 8000664:	81fb      	strh	r3, [r7, #14]

	pSPIx->pSPIx->SPI_CR1 = temp;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	89fa      	ldrh	r2, [r7, #14]
 800066c:	601a      	str	r2, [r3, #0]

}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <SPI_GetFlagStatus>:

void SPI_Deinit(SPI_RegDef_t *pSPIx);

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t bitAddr){
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = ((pSPIx->SPI_SR >> bitAddr) & 1) ? 1 : 0;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	fa22 f303 	lsr.w	r3, r2, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
	return temp;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	while(len > 0){
 80006b6:	e027      	b.n	8000708 <SPI_SendData+0x5e>
		//wait until the TXE is empty
		while(!(SPI_GetFlagStatus(pSPIx, 1) == 1)){}
 80006b8:	bf00      	nop
 80006ba:	2101      	movs	r1, #1
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff ffdb 	bl	8000678 <SPI_GetFlagStatus>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1f8      	bne.n	80006ba <SPI_SendData+0x10>

		//check the DFF bit in CR1
		if((pSPIx->SPI_CR1 & ( 1 << 11))){
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00e      	beq.n	80006f2 <SPI_SendData+0x48>
			//16 bits DFF

			//1. load the data in to the DR
			pSPIx->SPI_DR = (*(uint16_t*)pTxBuffer);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	60da      	str	r2, [r3, #12]
			(len--);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
			len--;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e00a      	b.n	8000708 <SPI_SendData+0x5e>
		}
		else{
			//8 bits DFF

			//1 load data into the DR
			pSPIx->SPI_DR = *pTxBuffer;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	60da      	str	r2, [r3, #12]
			len--;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	3301      	adds	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
	while(len > 0){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1d4      	bne.n	80006b8 <SPI_SendData+0xe>
		}


	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SPI_PeripheralCtrl>:


void SPI_PeripheralCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	if ( EnorDi == ENABLE){
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d106      	bne.n	8000738 <SPI_PeripheralCtrl+0x20>
		pSPIx->SPI_CR1 |= ( 1 << 6);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->SPI_CR1 &= ~( 1 << 6);
	}
}
 8000736:	e005      	b.n	8000744 <SPI_PeripheralCtrl+0x2c>
		pSPIx->SPI_CR1 &= ~( 1 << 6);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <SPI_SSICtr>:

void SPI_SSICtr(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	70fb      	strb	r3, [r7, #3]
	if ( EnorDi == ENABLE){
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d106      	bne.n	800076e <SPI_SSICtr+0x20>
			pSPIx->SPI_CR1 |= ( 1 << 8);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
		}else{
			pSPIx->SPI_CR1 &= ~( 1 << 8);
		}
}
 800076c:	e005      	b.n	800077a <SPI_SSICtr+0x2c>
			pSPIx->SPI_CR1 &= ~( 1 << 8);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SPI2_GPIOinitS>:
 * PB13 - SPI2_SCLK
 * PB12 - SPI2_NSS
 */


void SPI2_GPIOinitS(){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIpins;

	SPIpins.pGPIOx = GPIOB;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <SPI2_GPIOinitS+0x58>)
 800078c:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_ALT;
 800078e:	2301      	movs	r3, #1
 8000790:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinOP_AltFunc_PpOp = GPIO_AltPp;
 8000792:	2302      	movs	r3, #2
 8000794:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed  = GPIO_Speed_10MHz;
 8000796:	2301      	movs	r3, #1
 8000798:	72bb      	strb	r3, [r7, #10]

	GPIO_PeriClockCtr(GPIOB, ENABLE);
 800079a:	2101      	movs	r1, #1
 800079c:	480f      	ldr	r0, [pc, #60]	; (80007dc <SPI2_GPIOinitS+0x58>)
 800079e:	f7ff fcef 	bl	8000180 <GPIO_PeriClockCtr>

	//SCLK
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80007a2:	230d      	movs	r3, #13
 80007a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd71 	bl	8000290 <GPIO_Init>

	//MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80007ae:	230f      	movs	r3, #15
 80007b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd6b 	bl	8000290 <GPIO_Init>

	//MISO
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80007ba:	230e      	movs	r3, #14
 80007bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd65 	bl	8000290 <GPIO_Init>

	//NSS
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80007c6:	230c      	movs	r3, #12
 80007c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd5f 	bl	8000290 <GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <SPI2_Init>:

void SPI2_Init(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <SPI2_Init+0x40>)
 80007e8:	607b      	str	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80007ea:	2301      	movs	r3, #1
 80007ec:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80007ee:	2301      	movs	r3, #1
 80007f0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80007f2:	2300      	movs	r3, #0
 80007f4:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_16BITS;
 80007f6:	2301      	movs	r3, #1
 80007f8:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPHA_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_HIGH;
 80007fe:	2301      	movs	r3, #1
 8000800:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_EN;
 8000802:	2301      	movs	r3, #1
 8000804:	73bb      	strb	r3, [r7, #14]

	SPI_PCLK_CTRL(SPI2, ENABLE);
 8000806:	2101      	movs	r1, #1
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <SPI2_Init+0x40>)
 800080a:	f7ff fe6d 	bl	80004e8 <SPI_PCLK_CTRL>

	SPI_Init(&SPI2handle);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fec1 	bl	8000598 <SPI_Init>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40003800 	.word	0x40003800

08000824 <main>:

int main(){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

	char use_data[] = "Hello World";
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <main+0x40>)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000830:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI2_GPIOinitS();
 8000834:	f7ff ffa6 	bl	8000784 <SPI2_GPIOinitS>

	SPI2_Init();
 8000838:	f7ff ffd2 	bl	80007e0 <SPI2_Init>

	//this function make NSS signal high and avoids MODF error
	SPI_SSICtr(SPI2, ENABLE);
 800083c:	2101      	movs	r1, #1
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <main+0x44>)
 8000840:	f7ff ff85 	bl	800074e <SPI_SSICtr>

	//enable the SPI2 peripheral
	SPI_PeripheralCtrl(SPI2, ENABLE);
 8000844:	2101      	movs	r1, #1
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <main+0x44>)
 8000848:	f7ff ff66 	bl	8000718 <SPI_PeripheralCtrl>

	//send data
	SPI_SendData(SPI2, (uint8_t*)use_data, strlen(use_data));
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fc8e 	bl	8000170 <strlen>
 8000854:	4602      	mov	r2, r0
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <main+0x44>)
 800085c:	f7ff ff25 	bl	80006aa <SPI_SendData>

	while(1);
 8000860:	e7fe      	b.n	8000860 <main+0x3c>
 8000862:	bf00      	nop
 8000864:	08000920 	.word	0x08000920
 8000868:	40003800 	.word	0x40003800

0800086c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000870:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	; (80008ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <LoopForever+0xe>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	; (80008b8 <LoopForever+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800089a:	f000 f811 	bl	80008c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff ffc1 	bl	8000824 <main>

080008a2 <LoopForever>:

LoopForever:
  b LoopForever
 80008a2:	e7fe      	b.n	80008a2 <LoopForever>
  ldr   r0, =_estack
 80008a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008b0:	08000934 	.word	0x08000934
  ldr r2, =_sbss
 80008b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008b8:	2000001c 	.word	0x2000001c

080008bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC1_2_IRQHandler>
	...

080008c0 <__libc_init_array>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	2600      	movs	r6, #0
 80008c4:	4d0c      	ldr	r5, [pc, #48]	; (80008f8 <__libc_init_array+0x38>)
 80008c6:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__libc_init_array+0x3c>)
 80008c8:	1b64      	subs	r4, r4, r5
 80008ca:	10a4      	asrs	r4, r4, #2
 80008cc:	42a6      	cmp	r6, r4
 80008ce:	d109      	bne.n	80008e4 <__libc_init_array+0x24>
 80008d0:	f000 f81a 	bl	8000908 <_init>
 80008d4:	2600      	movs	r6, #0
 80008d6:	4d0a      	ldr	r5, [pc, #40]	; (8000900 <__libc_init_array+0x40>)
 80008d8:	4c0a      	ldr	r4, [pc, #40]	; (8000904 <__libc_init_array+0x44>)
 80008da:	1b64      	subs	r4, r4, r5
 80008dc:	10a4      	asrs	r4, r4, #2
 80008de:	42a6      	cmp	r6, r4
 80008e0:	d105      	bne.n	80008ee <__libc_init_array+0x2e>
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e8:	4798      	blx	r3
 80008ea:	3601      	adds	r6, #1
 80008ec:	e7ee      	b.n	80008cc <__libc_init_array+0xc>
 80008ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f2:	4798      	blx	r3
 80008f4:	3601      	adds	r6, #1
 80008f6:	e7f2      	b.n	80008de <__libc_init_array+0x1e>
 80008f8:	0800092c 	.word	0x0800092c
 80008fc:	0800092c 	.word	0x0800092c
 8000900:	0800092c 	.word	0x0800092c
 8000904:	08000930 	.word	0x08000930

08000908 <_init>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr

08000914 <_fini>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

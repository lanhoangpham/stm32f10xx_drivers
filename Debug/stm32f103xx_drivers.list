
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000800  08000808  00010808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000800  08000800  00010808  2**0
                  CONTENTS
  4 .ARM          00000000  08000800  08000800  00010808  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000800  08000808  00010808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000800  08000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000804  08000804  00010804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000808  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000808  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010808  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000943  00000000  00000000  00010831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000020d  00000000  00000000  00011174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00011388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e01  00000000  00000000  000114f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ea3  00000000  00000000  000132f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000083dc  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007e8 	.word	0x080007e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007e8 	.word	0x080007e8

08000170 <GPIO_PeriClockCtr>:
 * For more information about the APIs check the function definitions
 ***********************************************************************************************/
/*
 * peripheral clock setup
 * */
void GPIO_PeriClockCtr(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	if( EnorDi == ENABLE){
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d136      	bne.n	80001f0 <GPIO_PeriClockCtr+0x80>
		if (pGPIOx == GPIOA){
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a38      	ldr	r2, [pc, #224]	; (8000268 <GPIO_PeriClockCtr+0xf8>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIO_PeriClockCtr+0x28>
			GPIOA_PCLK_EN();
 800018a:	4b38      	ldr	r3, [pc, #224]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a37      	ldr	r2, [pc, #220]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
			GPIOE_PCLK_DI();
		}
	}


}
 8000196:	e061      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOB){
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a35      	ldr	r2, [pc, #212]	; (8000270 <GPIO_PeriClockCtr+0x100>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIO_PeriClockCtr+0x3e>
			GPIOB_PCLK_EN();
 80001a0:	4b32      	ldr	r3, [pc, #200]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a31      	ldr	r2, [pc, #196]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
}
 80001ac:	e056      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOC){
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a30      	ldr	r2, [pc, #192]	; (8000274 <GPIO_PeriClockCtr+0x104>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d106      	bne.n	80001c4 <GPIO_PeriClockCtr+0x54>
			GPIOC_PCLK_EN();
 80001b6:	4b2d      	ldr	r3, [pc, #180]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a2c      	ldr	r2, [pc, #176]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
}
 80001c2:	e04b      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOD){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a2c      	ldr	r2, [pc, #176]	; (8000278 <GPIO_PeriClockCtr+0x108>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d106      	bne.n	80001da <GPIO_PeriClockCtr+0x6a>
			GPIOD_PCLK_EN();
 80001cc:	4b27      	ldr	r3, [pc, #156]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a26      	ldr	r2, [pc, #152]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
}
 80001d8:	e040      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOE){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a27      	ldr	r2, [pc, #156]	; (800027c <GPIO_PeriClockCtr+0x10c>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d13c      	bne.n	800025c <GPIO_PeriClockCtr+0xec>
			GPIOE_PCLK_EN();
 80001e2:	4b22      	ldr	r3, [pc, #136]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a21      	ldr	r2, [pc, #132]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ec:	6193      	str	r3, [r2, #24]
}
 80001ee:	e035      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		if (pGPIOx == GPIOA){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <GPIO_PeriClockCtr+0xf8>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_PeriClockCtr+0x96>
			GPIOA_PCLK_DI();
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a1b      	ldr	r2, [pc, #108]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 80001fe:	f023 0304 	bic.w	r3, r3, #4
 8000202:	6193      	str	r3, [r2, #24]
}
 8000204:	e02a      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOB){
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a19      	ldr	r2, [pc, #100]	; (8000270 <GPIO_PeriClockCtr+0x100>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_PeriClockCtr+0xac>
			GPIOB_PCLK_DI();
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000214:	f023 0308 	bic.w	r3, r3, #8
 8000218:	6193      	str	r3, [r2, #24]
}
 800021a:	e01f      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOC){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <GPIO_PeriClockCtr+0x104>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_PeriClockCtr+0xc2>
			GPIOC_PCLK_DI();
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 800022a:	f023 0310 	bic.w	r3, r3, #16
 800022e:	6193      	str	r3, [r2, #24]
}
 8000230:	e014      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOD){
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <GPIO_PeriClockCtr+0x108>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_PeriClockCtr+0xd8>
			GPIOD_PCLK_DI();
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000240:	f023 0320 	bic.w	r3, r3, #32
 8000244:	6193      	str	r3, [r2, #24]
}
 8000246:	e009      	b.n	800025c <GPIO_PeriClockCtr+0xec>
		else if (pGPIOx == GPIOE){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a0c      	ldr	r2, [pc, #48]	; (800027c <GPIO_PeriClockCtr+0x10c>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d105      	bne.n	800025c <GPIO_PeriClockCtr+0xec>
			GPIOE_PCLK_DI();
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <GPIO_PeriClockCtr+0xfc>)
 8000256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800025a:	6193      	str	r3, [r2, #24]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	40021000 	.word	0x40021000
 8000270:	40010c00 	.word	0x40010c00
 8000274:	40011000 	.word	0x40011000
 8000278:	40011400 	.word	0x40011400
 800027c:	40011800 	.word	0x40011800

08000280 <GPIO_Init>:
/**
 * initialize and di-int
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	//get pin number of this GPIO
	uint8_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	791b      	ldrb	r3, [r3, #4]
 800028c:	73bb      	strb	r3, [r7, #14]

	uint8_t temp;

	//configure for input mode
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == 0) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2) ){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	795b      	ldrb	r3, [r3, #5]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d003      	beq.n	800029e <GPIO_Init+0x1e>
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	7a9b      	ldrb	r3, [r3, #10]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d904      	bls.n	80002a8 <GPIO_Init+0x28>

		temp = (uint8_t)pGPIOHandle->GPIO_PinConfig.GPIO_PinInType << 2;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	79db      	ldrb	r3, [r3, #7]
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	73fb      	strb	r3, [r7, #15]
 80002a6:	e00b      	b.n	80002c0 <GPIO_Init+0x40>

	}
	//configure for output mode and alternate function
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == 1){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d107      	bne.n	80002c0 <GPIO_Init+0x40>

		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOutPpOp) << 2) + pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7a1b      	ldrb	r3, [r3, #8]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	799b      	ldrb	r3, [r3, #6]
 80002bc:	4413      	add	r3, r2
 80002be:	73fb      	strb	r3, [r7, #15]

	}

	//configure for port register high
	 if ( (pinNumber > 7 ) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2)){
 80002c0:	7bbb      	ldrb	r3, [r7, #14]
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <GPIO_Init+0x4e>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	7a9b      	ldrb	r3, [r3, #10]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d91f      	bls.n	800030e <GPIO_Init+0x8e>

		 //clear the pin number
		 pGPIOHandle->pGPIOx->GPIOx_CRH &= ~(0xF << (4 * (pinNumber % 8)));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	210f      	movs	r1, #15
 80002de:	fa01 f303 	lsl.w	r3, r1, r3
 80002e2:	43db      	mvns	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	400a      	ands	r2, r1
 80002ec:	605a      	str	r2, [r3, #4]

		 //set pin mode
		 pGPIOHandle->pGPIOx->GPIOx_CRH |= temp << (4 * (pinNumber % 8));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	7bf9      	ldrb	r1, [r7, #15]
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	f003 0307 	and.w	r3, r3, #7
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	4619      	mov	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	430a      	orrs	r2, r1
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	e021      	b.n	8000352 <GPIO_Init+0xd2>

	 }
	 //configure for port register low
	 else if((pinNumber <= 7 ) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < 2)){
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	2b07      	cmp	r3, #7
 8000312:	d81e      	bhi.n	8000352 <GPIO_Init+0xd2>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d81a      	bhi.n	8000352 <GPIO_Init+0xd2>

		 //clear the pin number
		 pGPIOHandle->pGPIOx->GPIOx_CRL &= ~(0xF << (4 * (pinNumber)));
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	210f      	movs	r1, #15
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	43db      	mvns	r3, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	400a      	ands	r2, r1
 8000336:	601a      	str	r2, [r3, #0]

		 //set pin mode
		 pGPIOHandle->pGPIOx->GPIOx_CRL |= temp << (4 * pinNumber);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	7bf9      	ldrb	r1, [r7, #15]
 8000340:	7bbb      	ldrb	r3, [r7, #14]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	4619      	mov	r1, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	430a      	orrs	r2, r1
 8000350:	601a      	str	r2, [r3, #0]

	 }

	 /*this part code for interrupt mode*/
	 	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt >= 2){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	7a9b      	ldrb	r3, [r3, #10]
 8000356:	2b01      	cmp	r3, #1
 8000358:	f240 80a5 	bls.w	80004a6 <GPIO_Init+0x226>

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_FT ){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7a9b      	ldrb	r3, [r3, #10]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d114      	bne.n	800038e <GPIO_Init+0x10e>

	 			//configure the FTSR
	 			EXTI->EXTI_FTSR |= (1 << pinNumber);
 8000364:	4b52      	ldr	r3, [pc, #328]	; (80004b0 <GPIO_Init+0x230>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	7bba      	ldrb	r2, [r7, #14]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a4f      	ldr	r2, [pc, #316]	; (80004b0 <GPIO_Init+0x230>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]

	 			//clear the corresponding RTSR bit
	 			EXTI->EXTI_RTSR &= ~(1 << pinNumber);
 8000378:	4b4d      	ldr	r3, [pc, #308]	; (80004b0 <GPIO_Init+0x230>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	7bba      	ldrb	r2, [r7, #14]
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	4611      	mov	r1, r2
 8000388:	4a49      	ldr	r2, [pc, #292]	; (80004b0 <GPIO_Init+0x230>)
 800038a:	400b      	ands	r3, r1
 800038c:	6093      	str	r3, [r2, #8]

	 		}

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_RT ){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7a9b      	ldrb	r3, [r3, #10]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d114      	bne.n	80003c0 <GPIO_Init+0x140>

	 			//configure the RTSR pin
	 			EXTI->EXTI_RTSR |= (1 << pinNumber);
 8000396:	4b46      	ldr	r3, [pc, #280]	; (80004b0 <GPIO_Init+0x230>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	7bba      	ldrb	r2, [r7, #14]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a42      	ldr	r2, [pc, #264]	; (80004b0 <GPIO_Init+0x230>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6093      	str	r3, [r2, #8]

	 			//clear the corresponding FTSR pin
	 			EXTI->EXTI_FTSR &= ~(1 << pinNumber);
 80003aa:	4b41      	ldr	r3, [pc, #260]	; (80004b0 <GPIO_Init+0x230>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	7bba      	ldrb	r2, [r7, #14]
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <GPIO_Init+0x230>)
 80003bc:	400b      	ands	r3, r1
 80003be:	60d3      	str	r3, [r2, #12]
	 		}

	 		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinInterrupt == GPIO_MODE_IT_RFT ){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	7a9b      	ldrb	r3, [r3, #10]
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d113      	bne.n	80003f0 <GPIO_Init+0x170>

	 			//configure the FTSR
	 			EXTI->EXTI_FTSR |= (1 << pinNumber);
 80003c8:	4b39      	ldr	r3, [pc, #228]	; (80004b0 <GPIO_Init+0x230>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	7bba      	ldrb	r2, [r7, #14]
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a36      	ldr	r2, [pc, #216]	; (80004b0 <GPIO_Init+0x230>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	60d3      	str	r3, [r2, #12]

	 			//configure the RTSR pin
	 			EXTI->EXTI_RTSR |= (1 << pinNumber);
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <GPIO_Init+0x230>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	7bba      	ldrb	r2, [r7, #14]
 80003e2:	2101      	movs	r1, #1
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <GPIO_Init+0x230>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6093      	str	r3, [r2, #8]
	 		}

	 		/*configure the GPIO port selection in AFIO_EXTICR*/

	 		//select the port
	 		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <GPIO_Init+0x234>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d02b      	beq.n	8000452 <GPIO_Init+0x1d2>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <GPIO_Init+0x238>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d024      	beq.n	800044e <GPIO_Init+0x1ce>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2c      	ldr	r2, [pc, #176]	; (80004bc <GPIO_Init+0x23c>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d01d      	beq.n	800044a <GPIO_Init+0x1ca>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <GPIO_Init+0x240>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d016      	beq.n	8000446 <GPIO_Init+0x1c6>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a29      	ldr	r2, [pc, #164]	; (80004c4 <GPIO_Init+0x244>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d00f      	beq.n	8000442 <GPIO_Init+0x1c2>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <GPIO_Init+0x248>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d008      	beq.n	800043e <GPIO_Init+0x1be>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <GPIO_Init+0x24c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d101      	bne.n	800043a <GPIO_Init+0x1ba>
 8000436:	2306      	movs	r3, #6
 8000438:	e00c      	b.n	8000454 <GPIO_Init+0x1d4>
 800043a:	2300      	movs	r3, #0
 800043c:	e00a      	b.n	8000454 <GPIO_Init+0x1d4>
 800043e:	2305      	movs	r3, #5
 8000440:	e008      	b.n	8000454 <GPIO_Init+0x1d4>
 8000442:	2304      	movs	r3, #4
 8000444:	e006      	b.n	8000454 <GPIO_Init+0x1d4>
 8000446:	2303      	movs	r3, #3
 8000448:	e004      	b.n	8000454 <GPIO_Init+0x1d4>
 800044a:	2302      	movs	r3, #2
 800044c:	e002      	b.n	8000454 <GPIO_Init+0x1d4>
 800044e:	2301      	movs	r3, #1
 8000450:	e000      	b.n	8000454 <GPIO_Init+0x1d4>
 8000452:	2300      	movs	r3, #0
 8000454:	737b      	strb	r3, [r7, #13]

	 		//enable clock for AFIO periphery6al
	 		AFIO_PCLK_EN();
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <GPIO_Init+0x250>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <GPIO_Init+0x250>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]

	 		//set the pin
	 		uint8_t temp1 = pinNumber / 4;
 8000462:	7bbb      	ldrb	r3, [r7, #14]
 8000464:	089b      	lsrs	r3, r3, #2
 8000466:	733b      	strb	r3, [r7, #12]
	 		uint8_t temp2 = pinNumber % 4;
 8000468:	7bbb      	ldrb	r3, [r7, #14]
 800046a:	f003 0303 	and.w	r3, r3, #3
 800046e:	72fb      	strb	r3, [r7, #11]
	 		AFIO->AFIO_EXTICR[temp1] |= portcode << (4 * (temp2));
 8000470:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <GPIO_Init+0x254>)
 8000472:	7b3b      	ldrb	r3, [r7, #12]
 8000474:	3302      	adds	r3, #2
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	7b79      	ldrb	r1, [r7, #13]
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	4618      	mov	r0, r3
 8000486:	4913      	ldr	r1, [pc, #76]	; (80004d4 <GPIO_Init+0x254>)
 8000488:	7b3b      	ldrb	r3, [r7, #12]
 800048a:	4302      	orrs	r2, r0
 800048c:	3302      	adds	r3, #2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	 		/*enable the exti interrupt delivery using IMR*/
	 		EXTI->EXTI_IMR |= ( 1 << pinNumber);
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <GPIO_Init+0x230>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	7bba      	ldrb	r2, [r7, #14]
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <GPIO_Init+0x230>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6013      	str	r3, [r2, #0]
	 	}

}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40010400 	.word	0x40010400
 80004b4:	40010800 	.word	0x40010800
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40011400 	.word	0x40011400
 80004c4:	40011800 	.word	0x40011800
 80004c8:	40011c00 	.word	0x40011c00
 80004cc:	40012000 	.word	0x40012000
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value){
	pGPIOx->GPIOx_ODR = value;
}


void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNunber){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->GPIOx_ODR ^=  (1 << PinNunber);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	405a      	eors	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <GPIO_IRQInterruptConfig>:

/**
 * IRQ configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	460a      	mov	r2, r1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE ){
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d133      	bne.n	800057e <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31 ){
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b1f      	cmp	r3, #31
 800051a:	d80a      	bhi.n	8000532 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << (IRQNumber));
 800051c:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <GPIO_IRQInterruptConfig+0xf0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	2101      	movs	r1, #1
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	4611      	mov	r1, r2
 800052a:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <GPIO_IRQInterruptConfig+0xf0>)
 800052c:	430b      	orrs	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
		}
		else if ( IRQNumber >= 64 && IRQNumber < 96){
			*NVIC_ICER2 |= (1 << (IRQNumber % 64) );
		}
	}
}
 8000530:	e059      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
		else if( IRQNumber > 31 && IRQNumber < 64){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b1f      	cmp	r3, #31
 8000536:	d90f      	bls.n	8000558 <GPIO_IRQInterruptConfig+0x58>
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	; 0x3f
 800053c:	d80c      	bhi.n	8000558 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <GPIO_IRQInterruptConfig+0xf4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	f002 021f 	and.w	r2, r2, #31
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <GPIO_IRQInterruptConfig+0xf4>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	e046      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96){
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b3f      	cmp	r3, #63	; 0x3f
 800055c:	d943      	bls.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b5f      	cmp	r3, #95	; 0x5f
 8000562:	d840      	bhi.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64));
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <GPIO_IRQInterruptConfig+0xf8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <GPIO_IRQInterruptConfig+0xf8>)
 8000578:	430b      	orrs	r3, r1
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	e033      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31 ){
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b1f      	cmp	r3, #31
 8000582:	d80a      	bhi.n	800059a <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <GPIO_IRQInterruptConfig+0xfc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	2101      	movs	r1, #1
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	4611      	mov	r1, r2
 8000592:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <GPIO_IRQInterruptConfig+0xfc>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	e025      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
		else if( IRQNumber > 31 && IRQNumber < 64){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b1f      	cmp	r3, #31
 800059e:	d90f      	bls.n	80005c0 <GPIO_IRQInterruptConfig+0xc0>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b3f      	cmp	r3, #63	; 0x3f
 80005a4:	d80c      	bhi.n	80005c0 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <GPIO_IRQInterruptConfig+0x100>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	f002 021f 	and.w	r2, r2, #31
 80005b0:	2101      	movs	r1, #1
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <GPIO_IRQInterruptConfig+0x100>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e012      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
		else if ( IRQNumber >= 64 && IRQNumber < 96){
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b3f      	cmp	r3, #63	; 0x3f
 80005c4:	d90f      	bls.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b5f      	cmp	r3, #95	; 0x5f
 80005ca:	d80c      	bhi.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64) );
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <GPIO_IRQInterruptConfig+0x104>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	79fa      	ldrb	r2, [r7, #7]
 80005d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <GPIO_IRQInterruptConfig+0x104>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	e7ff      	b.n	80005e6 <GPIO_IRQInterruptConfig+0xe6>
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100
 80005f4:	e000e104 	.word	0xe000e104
 80005f8:	e000e108 	.word	0xe000e108
 80005fc:	e000e180 	.word	0xe000e180
 8000600:	e000e184 	.word	0xe000e184
 8000604:	e000e188 	.word	0xe000e188

08000608 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
	//1. find out the IPR register
	uint8_t iprx = IRQNumber / 4;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 0303 	and.w	r3, r3, #3
 8000620:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section ) + ( 8 - NO_PR_BITS_IMPLEMENTED);
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	3304      	adds	r3, #4
 800062a:	737b      	strb	r3, [r7, #13]
	//*(NVIC_IPR +  (4 * iprx)) |= IRQPriority << shift_amount;
	NVIC_IPR->NVIC_IPR_ARR[iprx] |= IRQPriority << shift_amount;
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <GPIO_IRQPriorityConfig+0x48>)
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000634:	7b7b      	ldrb	r3, [r7, #13]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	409a      	lsls	r2, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <GPIO_IRQPriorityConfig+0x48>)
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	430a      	orrs	r2, r1
 8000640:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e400 	.word	0xe000e400

08000654 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNunber){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if (EXTI->EXTI_PR & ( 1 << PinNunber)){
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <GPIO_IRQHandling+0x3c>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	2101      	movs	r1, #1
 8000666:	fa01 f202 	lsl.w	r2, r1, r2
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d009      	beq.n	8000684 <GPIO_IRQHandling+0x30>
		//clear
		EXTI->EXTI_PR |= ( 1 << PinNunber);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <GPIO_IRQHandling+0x3c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <GPIO_IRQHandling+0x3c>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6153      	str	r3, [r2, #20]
	}
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40010400 	.word	0x40010400

08000694 <main>:
#include <string.h>
#include "stm32f103xx_gpio_driver.h"


int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
   GPIO_Handle_t GPIOxLed, GPIO_Btn;

   memset(&GPIOxLed, 0, sizeof(GPIOxLed));
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	220c      	movs	r2, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f898 	bl	80007d8 <memset>
   memset(&GPIO_Btn, 0, sizeof(GPIO_Btn));
 80006a8:	463b      	mov	r3, r7
 80006aa:	220c      	movs	r2, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f892 	bl	80007d8 <memset>

   GPIOxLed.pGPIOx = GPIOA;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <main+0x88>)
 80006b6:	60fb      	str	r3, [r7, #12]
   GPIOxLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	743b      	strb	r3, [r7, #16]
   GPIOxLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_ALT;
 80006bc:	2301      	movs	r3, #1
 80006be:	747b      	strb	r3, [r7, #17]
   GPIOxLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_Speed_2MHz;
 80006c0:	2302      	movs	r3, #2
 80006c2:	74bb      	strb	r3, [r7, #18]
   GPIOxLed.GPIO_PinConfig.GPIO_PinOutPpOp = GPIO_OutPP;
 80006c4:	2300      	movs	r3, #0
 80006c6:	753b      	strb	r3, [r7, #20]

   GPIO_PeriClockCtr(GPIOA, ENABLE );
 80006c8:	2101      	movs	r1, #1
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <main+0x88>)
 80006cc:	f7ff fd50 	bl	8000170 <GPIO_PeriClockCtr>
   //GPIOC_PCLK_EN();

   GPIO_Init(&GPIOxLed);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fdd3 	bl	8000280 <GPIO_Init>



   GPIO_Btn.pGPIOx = GPIOA;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x88>)
 80006dc:	603b      	str	r3, [r7, #0]
   GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80006de:	2305      	movs	r3, #5
 80006e0:	713b      	strb	r3, [r7, #4]
   GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]
   GPIO_Btn.GPIO_PinConfig.GPIO_PinInterrupt = GPIO_MODE_IT_FT;
 80006e6:	2302      	movs	r3, #2
 80006e8:	72bb      	strb	r3, [r7, #10]
   GPIO_Btn.GPIO_PinConfig.GPIO_PinInType = GPIO_InPuPd;
 80006ea:	2302      	movs	r3, #2
 80006ec:	71fb      	strb	r3, [r7, #7]

   //GPIO_PeriClockCtr(GPIOA, ENABLE );

   GPIO_Init(&GPIO_Btn);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdc5 	bl	8000280 <GPIO_Init>

   //set thanh bit 10 cua thanh ghi ODR--> pull up
   GPIO_Btn.pGPIOx->GPIOx_ODR |= (1 <<  GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	408b      	lsls	r3, r1
 8000702:	4619      	mov	r1, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	430a      	orrs	r2, r1
 8000708:	60da      	str	r2, [r3, #12]

   //IRQ configuration
   GPIO_IRQPriorityConfig(IRQ_NO_EXTI5_9, NVIC_IRQ_PRIORITY15);
 800070a:	210f      	movs	r1, #15
 800070c:	2017      	movs	r0, #23
 800070e:	f7ff ff7b 	bl	8000608 <GPIO_IRQPriorityConfig>

   GPIO_IRQInterruptConfig(IRQ_NO_EXTI5_9, ENABLE);
 8000712:	2101      	movs	r1, #1
 8000714:	2017      	movs	r0, #23
 8000716:	f7ff fef3 	bl	8000500 <GPIO_IRQInterruptConfig>

   while(1){
 800071a:	e7fe      	b.n	800071a <main+0x86>
 800071c:	40010800 	.word	0x40010800

08000720 <EXTI9_5_IRQHandler>:
   return 0;

}


void EXTI9_5_IRQHandler(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(5);//clear the pending event from the exti line
 8000724:	2005      	movs	r0, #5
 8000726:	f7ff ff95 	bl	8000654 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_1);
 800072a:	2101      	movs	r1, #1
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <EXTI9_5_IRQHandler+0x18>)
 800072e:	f7ff fed3 	bl	80004d8 <GPIO_ToggleOutputPin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40010800 	.word	0x40010800

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f000 f811 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff ff91 	bl	8000694 <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000780:	08000808 	.word	0x08000808
  ldr r2, =_sbss
 8000784:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000788:	2000001c 	.word	0x2000001c

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	2600      	movs	r6, #0
 8000794:	4d0c      	ldr	r5, [pc, #48]	; (80007c8 <__libc_init_array+0x38>)
 8000796:	4c0d      	ldr	r4, [pc, #52]	; (80007cc <__libc_init_array+0x3c>)
 8000798:	1b64      	subs	r4, r4, r5
 800079a:	10a4      	asrs	r4, r4, #2
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	f000 f822 	bl	80007e8 <_init>
 80007a4:	2600      	movs	r6, #0
 80007a6:	4d0a      	ldr	r5, [pc, #40]	; (80007d0 <__libc_init_array+0x40>)
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <__libc_init_array+0x44>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	08000800 	.word	0x08000800
 80007cc:	08000800 	.word	0x08000800
 80007d0:	08000800 	.word	0x08000800
 80007d4:	08000804 	.word	0x08000804

080007d8 <memset>:
 80007d8:	4603      	mov	r3, r0
 80007da:	4402      	add	r2, r0
 80007dc:	4293      	cmp	r3, r2
 80007de:	d100      	bne.n	80007e2 <memset+0xa>
 80007e0:	4770      	bx	lr
 80007e2:	f803 1b01 	strb.w	r1, [r3], #1
 80007e6:	e7f9      	b.n	80007dc <memset+0x4>

080007e8 <_init>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	bf00      	nop
 80007ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ee:	bc08      	pop	{r3}
 80007f0:	469e      	mov	lr, r3
 80007f2:	4770      	bx	lr

080007f4 <_fini>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr
